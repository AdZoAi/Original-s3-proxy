// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/metrics (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_Client.go -package=mocks github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/metrics Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	config "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/config"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetExposeHandler mocks base method.
func (m *MockClient) GetExposeHandler() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExposeHandler")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// GetExposeHandler indicates an expected call of GetExposeHandler.
func (mr *MockClientMockRecorder) GetExposeHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExposeHandler", reflect.TypeOf((*MockClient)(nil).GetExposeHandler))
}

// IncAuthenticated mocks base method.
func (m *MockClient) IncAuthenticated(providerType, providerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncAuthenticated", providerType, providerName)
}

// IncAuthenticated indicates an expected call of IncAuthenticated.
func (mr *MockClientMockRecorder) IncAuthenticated(providerType, providerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncAuthenticated", reflect.TypeOf((*MockClient)(nil).IncAuthenticated), providerType, providerName)
}

// IncAuthorized mocks base method.
func (m *MockClient) IncAuthorized(providerType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncAuthorized", providerType)
}

// IncAuthorized indicates an expected call of IncAuthorized.
func (mr *MockClientMockRecorder) IncAuthorized(providerType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncAuthorized", reflect.TypeOf((*MockClient)(nil).IncAuthorized), providerType)
}

// IncFailedWebhooks mocks base method.
func (m *MockClient) IncFailedWebhooks(targetName, actionName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncFailedWebhooks", targetName, actionName)
}

// IncFailedWebhooks indicates an expected call of IncFailedWebhooks.
func (mr *MockClientMockRecorder) IncFailedWebhooks(targetName, actionName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncFailedWebhooks", reflect.TypeOf((*MockClient)(nil).IncFailedWebhooks), targetName, actionName)
}

// IncS3Operations mocks base method.
func (m *MockClient) IncS3Operations(targetName, bucketName, operation string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncS3Operations", targetName, bucketName, operation)
}

// IncS3Operations indicates an expected call of IncS3Operations.
func (mr *MockClientMockRecorder) IncS3Operations(targetName, bucketName, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncS3Operations", reflect.TypeOf((*MockClient)(nil).IncS3Operations), targetName, bucketName, operation)
}

// IncSucceedWebhooks mocks base method.
func (m *MockClient) IncSucceedWebhooks(targetName, actionName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncSucceedWebhooks", targetName, actionName)
}

// IncSucceedWebhooks indicates an expected call of IncSucceedWebhooks.
func (mr *MockClientMockRecorder) IncSucceedWebhooks(targetName, actionName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncSucceedWebhooks", reflect.TypeOf((*MockClient)(nil).IncSucceedWebhooks), targetName, actionName)
}

// Instrument mocks base method.
func (m *MockClient) Instrument(serverLabel string, metricsCfg *config.MetricsConfig) func(http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instrument", serverLabel, metricsCfg)
	ret0, _ := ret[0].(func(http.Handler) http.Handler)
	return ret0
}

// Instrument indicates an expected call of Instrument.
func (mr *MockClientMockRecorder) Instrument(serverLabel, metricsCfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instrument", reflect.TypeOf((*MockClient)(nil).Instrument), serverLabel, metricsCfg)
}
