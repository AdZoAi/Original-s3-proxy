// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/bucket (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_Client.go -package=mocks github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/bucket Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	bucket "github.com/oxyno-zeta/s3-proxy/pkg/s3-proxy/bucket"
	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockClient) Delete(ctx context.Context, requestPath string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, requestPath)
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(ctx, requestPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), ctx, requestPath)
}

// Get mocks base method.
func (m *MockClient) Get(ctx context.Context, input *bucket.GetInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", ctx, input)
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), ctx, input)
}

// Head mocks base method.
func (m *MockClient) Head(ctx context.Context, input *bucket.GetInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Head", ctx, input)
}

// Head indicates an expected call of Head.
func (mr *MockClientMockRecorder) Head(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockClient)(nil).Head), ctx, input)
}

// LoadFileContent mocks base method.
func (m *MockClient) LoadFileContent(ctx context.Context, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFileContent", ctx, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFileContent indicates an expected call of LoadFileContent.
func (mr *MockClientMockRecorder) LoadFileContent(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFileContent", reflect.TypeOf((*MockClient)(nil).LoadFileContent), ctx, path)
}

// Put mocks base method.
func (m *MockClient) Put(ctx context.Context, inp *bucket.PutInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", ctx, inp)
}

// Put indicates an expected call of Put.
func (mr *MockClientMockRecorder) Put(ctx, inp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockClient)(nil).Put), ctx, inp)
}
